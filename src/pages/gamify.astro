---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";

// Fetch all terms
const allTerms = await getCollection("terms");

// Prepare terms for the game
const gameTerms = allTerms.map((term) => ({
  id: term.slug,
  title: term.data.title,
  description: term.data.description,
  question: term.data.question || term.data.analogy || term.data.description,
  hint: term.data.hint || "",
  tags: term.data.tags || [],
}));
---

<Layout title="Guess the Term - Eli5Dev">
  <main class="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
    <div class="container mx-auto px-4 py-12 sm:py-16">
      <div class="max-w-4xl mx-auto">
        <div class="mb-12">
          <a
            href="/"
            class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors mb-6 group"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2 transform transition-transform group-hover:-translate-x-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Home
          </a>
          <h1
            class="text-4xl sm:text-5xl font-bold mb-4 text-gray-900 dark:text-white bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400"
          >
            Guess the Term
          </h1>
          <p class="text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-2xl">
            Test your knowledge by guessing technical terms from their
            descriptions or analogies.
          </p>
        </div>

        <!-- Game Container -->
        <div
          class="bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-2xl shadow-xl mb-8 border border-gray-100 dark:border-gray-700 backdrop-blur-sm"
        >
          <div id="gameContainer">
            <!-- Game content will be inserted here by JavaScript -->
            <div class="text-center py-12">
              <div class="animate-pulse">
                <div class="h-8 w-48 bg-gray-200 dark:bg-gray-700 rounded-lg mx-auto mb-4"></div>
                <div class="h-4 w-64 bg-gray-200 dark:bg-gray-700 rounded-lg mx-auto"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Game Controls -->
        <div class="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
          <button
            id="newQuestionBtn"
            class="px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 dark:from-blue-700 dark:to-blue-800 dark:hover:from-blue-800 dark:hover:to-blue-900 text-white font-medium rounded-xl transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            New Question
          </button>
          <button
            id="toggleHintBtn"
            class="px-8 py-4 bg-white dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-medium rounded-xl transition-all transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            Show Hint
          </button>
        </div>

        <!-- Score Display -->
        <div class="text-center">
          <div
            class="inline-block bg-white dark:bg-gray-800 px-8 py-4 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700"
          >
            <span class="text-gray-600 dark:text-gray-300 text-lg">Score: </span>
            <span
              id="scoreDisplay"
              class="font-bold text-blue-600 dark:text-blue-400 text-xl">0</span
            >
            <span class="text-gray-600 dark:text-gray-300 text-lg"> / </span>
            <span
              id="totalQuestions"
              class="font-bold text-gray-800 dark:text-gray-200 text-xl">0</span
            >
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ gameTerms }}>
  // Game state
  let currentTerm = null;
  let score = 0;
  let totalQuestions = 0;
  let hintShown = false;

  // DOM elements
  const gameContainer = document.getElementById("gameContainer");
  const newQuestionBtn = document.getElementById("newQuestionBtn");
  const toggleHintBtn = document.getElementById("toggleHintBtn");
  const scoreDisplay = document.getElementById("scoreDisplay");
  const totalQuestionsDisplay = document.getElementById("totalQuestions");

  // Initialize the game
  function initGame() {
    newQuestionBtn?.addEventListener("click", loadNewQuestion);
    toggleHintBtn?.addEventListener("click", toggleHint);
    loadNewQuestion();
  }

  // Load a new question
  function loadNewQuestion() {
    // Reset hint state
    hintShown = false;
    toggleHintBtn.textContent = "Show Hint";

    // Select a random term
    const randomIndex = Math.floor(Math.random() * gameTerms.length);
    currentTerm = gameTerms[randomIndex];

    // Update the game container
    if (gameContainer) {
      gameContainer.innerHTML = `
        <div class="mb-8">
          <h2 class="text-2xl sm:text-3xl font-semibold mb-6 text-gray-800 dark:text-gray-200 text-center xl:text-left">What is this?</h2>
          <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl mb-6 border border-gray-100 dark:border-gray-600">
            <p class="text-gray-800 dark:text-gray-200 text-lg sm:text-xl leading-relaxed">${currentTerm.question}</p>
          </div>
          <div id="hintContainer" class="hidden bg-blue-50 dark:bg-blue-900/30 p-6 rounded-xl mb-6 border border-blue-100 dark:border-blue-800">
            <p class="text-blue-800 dark:text-blue-300">
              <span class="font-semibold">Hint:</span> ${currentTerm.hint || `This term is related to: ${currentTerm.tags.join(", ")}`}
            </p>
          </div>
          <div class="space-y-4">
            <input type="text" id="answerInput" class="w-full px-6 py-4 text-lg border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white transition-all" placeholder="Enter your guess...">
            <button id="submitAnswerBtn" class="w-full px-6 py-4 bg-gradient-to-r from-green-600 to-green-700 text-white font-medium rounded-xl transition-all transform hover:scale-95 shadow-lg hover:shadow-xl text-lg">
              Submit Answer
            </button>
          </div>
        </div>
      `;

      // Add event listener to the submit button
      const submitAnswerBtn = document.getElementById("submitAnswerBtn");
      const answerInput = document.getElementById("answerInput");

      submitAnswerBtn?.addEventListener("click", checkAnswer);
      answerInput?.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          checkAnswer();
        }
      });
    }
  }

  // Check the answer
  function checkAnswer() {
    const answerInput = document.getElementById("answerInput");
    const userAnswer = answerInput?.value.trim().toLowerCase();
    const correctAnswer = currentTerm.title.toLowerCase();

    if (!userAnswer) return;

    // Increment total questions
    totalQuestions++;
    totalQuestionsDisplay.textContent = totalQuestions;

    // Check if the answer is correct
    const isCorrect = userAnswer === correctAnswer;

    // Update score if correct
    if (isCorrect) {
      score++;
      scoreDisplay.textContent = score;
    }

    // Show result
    if (gameContainer) {
      gameContainer.innerHTML = `
        <div class="text-center py-8">
          <div class="mb-8">
            <div class="inline-flex items-center justify-center w-20 h-20 rounded-full ${isCorrect ? "bg-green-100 dark:bg-green-900" : "bg-red-100 dark:bg-red-900"} mb-6 transform transition-all animate-bounce">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 ${isCorrect ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                ${
                  isCorrect
                    ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />'
                    : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />'
                }
              </svg>
            </div>
            <h2 class="text-3xl font-bold mb-4 ${isCorrect ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"}">
              ${isCorrect ? "Correct!" : "Incorrect"}
            </h2>
            <p class="text-gray-600 dark:text-gray-400 mb-6 text-lg">
              ${
                isCorrect
                  ? "Great job! You correctly identified the term."
                  : `The correct answer was: <span class="font-semibold text-gray-800 dark:text-gray-200">${currentTerm.title}</span>`
              }
            </p>
            <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl mb-8 border border-gray-100 dark:border-gray-600">
              <p class="text-gray-800 dark:text-gray-200 text-lg">
                <span class="font-semibold">${currentTerm.title}</span>: ${currentTerm.description}
              </p>
            </div>

          </div>
        </div>
      `;

      // Add event listener to the next question button
      const nextQuestionBtn = document.getElementById("nextQuestionBtn");
      nextQuestionBtn?.addEventListener("click", loadNewQuestion);
    }
  }

  // Toggle hint
  function toggleHint() {
    const hintContainer = document.getElementById("hintContainer");
    if (hintContainer) {
      hintContainer.classList.toggle("hidden");
      hintShown = !hintShown;
      toggleHintBtn.textContent = hintShown ? "Hide Hint" : "Show Hint";
    }
  }

  // Initialize the game when the page loads
  document.addEventListener("DOMContentLoaded", initGame);
</script>
